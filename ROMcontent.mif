
-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Intel Program License
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.

WIDTH=32;
DEPTH=64;
ADDRESS_RADIX=DEC;
DATA_RADIX=HEX;

CONTENT BEGIN
      -- Valores iniciais no banco de registradores:
      -- $zero (#0) := 0x00
      -- $t0   (#8) := 0x00
      -- $t1   (#9) := 0x0A
      -- $t2  (#10) := 0x0B
      -- $t3  (#11) := 0x0C
      -- $t4  (#12) := 0x0D
      -- $t5  (#13) := 0x16

    0    :   AC090008; --sw $t1 8($zero)     (m(8) := 0x0000000A)  101011 00000 01001 x0008
    1    :   8C080008; --lw $t0 8($zero)     ($t0 := 0x0000000A)   100011 00000 01000 x0008
    2    :   012A4022; --sub $t0 $t1 $t2     ($t0 := 0xFFFFFFFF)   000000 01001 01010 01000 00000 100010
    3    :   012A4024; --and $t0 $t1 $t2     ($t0 := 0x0000000A)   000000 01001 01010 01000 00000 100100
    4    :   012A4025; --or $t0 $t1 $t2      ($t0 := 0x0000000B)   000000 01001 01010 01000 00000 100101
    5    :   3C08FFFF; --lui $x $t0 0xFFFF   ($t0 := 0xFFFF0000)   001111 00000 01000 xFFFF
    6    :   2128000A; --addi $t1 $t0 0x000A ($t0 := 0x00000014)   001000 01001 01000 x000A
    7    :   31080013; --andi $t0 $t0 0x0013 ($t0 := 0x00000010)   001100 01000 01000 x000A
    8    :   35880007; --ori $t4 $t0 0x0007  ($t0 := 0x0000000F)   001101 01100 01000 x0007
    9    :   2928FFFF; --slti $t1 $t0 0xFFFF ($t0 := 0x00000000)   001010 01001 01000 xFFFF
    10   :   010A4020; --add $t0 $t0 $t2     ($t0 := 0x0000000B)   000000 01000 01010 01000 00000 100000
                -- segunda execução ($t0 := 0x00000016)
    11   :   150DFFFE; --bne $t0 $t5 0xFFFE (pc := #10)           000101 01000 01101 xFFFE
                -- segunda execução (pc := #12)
    12   :   012A402A; --slt $t0 $t1 $t2     ($t0 := 0x00000001)   000000 01001 01010 01000 00000 101010
    13   :   010A4020; --add $t0 $t0 $t2     ($t0 := 0x0000000C)   000000 01000 01010 01000 00000 100000
                -- segunda execução ($t0 := 0x00000017)
    14   :   110BFFFE; --beq $t0 $t3 0xFFFE (pc := #13)           000100 01000 01011 xFFFE
                -- segunda execução (pc := #15)
    15   :   0C00001F; --jal 0x00001F       (pc := #31)           000011 00 x00001F
    17   :   08000000; --j 0x000000         (pc := #0)            000010 00 x000001
    31   :   03E00008; --jr $ra             (pc := #17)           000000 11111 00000 00000 00000 001000
END;